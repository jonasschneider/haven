#!/usr/bin/python
# escaping isn't perfect, be careful! especially with '

import serial,os,sys,base64,time,textwrap

ser=serial.Serial()
ser.port = os.environ["HAVEN_B_TEST_UML_PTS"]
ser.open()

# drain messages
while ser.inWaiting() > 0:
  ser.read(1)

if sys.__stdin__.isatty():
  ser.write("echo -n > /tmp/in\n")
  ser.readline() # readback
else:
  ser.write("stty -echo\n")
  # horribly inefficient, no chunking, rofl
  indata = "\n".join(textwrap.wrap(base64.b64encode(sys.stdin.read())))
  ser.write("cat | base64 -d > /tmp/in\n")
  ser.write(indata+"\n")
  ser.write("\x04")
  ser.read(1)
  # drain prompt
  while ser.inWaiting() > 0:
    ser.read(1)
  ser.write("stty echo\n")
  ser.write("date\n")
  ser.readline()
  ser.readline()
  #print "echo", ser.read(len(indata)) # input echo

# wait until we get the next prompt
while ser.inWaiting() == 0:
  time.sleep(.1)

def wrap(s): return '"'+s.replace('"','\\"'+'"')+'"'
cmdline=" ".join(map(wrap, sys.argv[1:]))
cmd="bash -c '"+cmdline+"' < /tmp/in > /tmp/out 2>/tmp/err\n"
ser.write(cmd)
ser.readline()

while ser.inWaiting() == 0:
  time.sleep(.1)

ser.write("cat /tmp/out| base64 -w0 | wc -c\n")
ser.readline()
len = int(ser.readline().strip())

while ser.inWaiting() == 0:
  time.sleep(.1)

ser.write("cat /tmp/out | base64 -w0\n")
ser.readline() # readback
data = ser.read(len)
sys.stdout.write(base64.b64decode(data))

while ser.inWaiting() == 0:
  time.sleep(.1)

ser.write("cat /tmp/err| base64 -w0 | wc -c\n")
ser.readline() # readback
len = int(ser.readline().strip())

while ser.inWaiting() == 0:
  time.sleep(.1)

ser.write("cat /tmp/err | base64 -w0\n")
ser.readline() # readback
data = ser.read(len)
sys.stderr.write(base64.b64decode(data))

while ser.inWaiting() == 0:
  time.sleep(.1)

ser.close()
